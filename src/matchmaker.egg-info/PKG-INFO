Metadata-Version: 2.4
Name: matchmaker
Version: 0.1.1
Summary: A GPU-accelerated user-to-user recommender engine.
Author: Zain Ansari
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: pandas
Provides-Extra: gpu
Requires-Dist: cudf-cu12>=25.0.0; platform_system == "Linux" and extra == "gpu"
Requires-Dist: cugraph-cu12>=25.0.0; platform_system == "Linux" and extra == "gpu"
Requires-Dist: cuml-cu12>=25.0.0; platform_system == "Linux" and extra == "gpu"
Requires-Dist: rmm-cu12>=25.0.0; platform_system == "Linux" and extra == "gpu"
Requires-Dist: cupy-cuda12x>=13.0; platform_system == "Linux" and extra == "gpu"

Lightweight matching engine with evaluation framework.

## System Requirements

**⚠️ CRITICAL: This library requires a Linux system with NVIDIA GPU and proper drivers**

### Hardware Requirements
- Linux operating system (Ubuntu 20.04+, RHEL 8+, or equivalent with glibc>=2.28)
- NVIDIA GPU with compute capability 7.0+ (Volta™ architecture or newer)
- Compatible GPUs include: RTX 20xx/30xx/40xx series, Tesla V100+, A100, H100, L4, etc.
- At least 8GB GPU memory recommended
- 16GB+ system RAM

### CUDA & NVIDIA Driver Requirements

Based on [RAPIDS official requirements](https://docs.rapids.ai/install/):

- **CUDA 12** with Driver 525.60.13 or newer
- **CUDA 13** compatibility coming soon

**Check your current setup:**
```bash
nvidia-smi  # Should show CUDA Version 12.0+ in top right
```

### NVIDIA Driver Installation

**Only install drivers if `nvidia-smi` doesn't work or shows older CUDA version**

#### Ubuntu/Debian Systems:
```bash
# Update package list
sudo apt update

# Install NVIDIA drivers (automatically selects appropriate version)
sudo ubuntu-drivers autoinstall

# OR install specific version
ubuntu-drivers devices  # Check available drivers
sudo apt install nvidia-driver-XXX  # Replace XXX with version number

# Reboot system (REQUIRED!)
sudo reboot
```

#### RHEL/CentOS/Rocky Linux:
```bash
# Install EPEL repository
sudo dnf install epel-release

# Install NVIDIA drivers
sudo dnf install nvidia-driver nvidia-settings

# Reboot system (REQUIRED!)
sudo reboot
```

#### Verify Driver Installation
```bash
nvidia-smi  # Should show GPU info and CUDA version 12.0+
```

## Getting started (development)

**Prerequisites: Linux system with NVIDIA GPU and drivers supporting CUDA 12+**

### Install Miniforge (Recommended by RAPIDS)

RAPIDS recommends using Miniforge over Miniconda/Anaconda for better compatibility:

```bash
# Download and install Miniforge
curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash "Miniforge3-$(uname)-$(uname -m).sh"

# Follow installation prompts and enable conda-init
# Close and reopen terminal
```

### Set up the development environment

```bash
git clone https://github.com/zainansarii/matchmaker.git
cd matchmaker

# Create environment using official RAPIDS pattern
conda env create -f environment.yml
conda activate matchmaker-dev
```

The environment.yml is based on the [official RAPIDS installation guide](https://docs.rapids.ai/install/) and installs:
- RAPIDS 25.08 with CUDA 12.x support
- Python 3.10
- NetworkX + nx-cugraph for graph processing
- JupyterLab for development
- All necessary CUDA dependencies

### Verify Installation

```bash
# Test NVIDIA drivers and CUDA
nvidia-smi

# Test RAPIDS installation
python -c "import cudf; print(cudf.Series([1, 2, 3]))"

# Test CuPy (included with RAPIDS)
python -c "import cupy; print(f'CuPy version: {cupy.__version__}'); print(f'CUDA device: {cupy.cuda.device.Device().id}')"

# Test matchmaker import
python -c "from matchmaker import matchmaker; print('Matchmaker imported successfully!')"
```

## Troubleshooting

### NVIDIA Driver Issues
- **"nvidia-smi: command not found"**: NVIDIA drivers not installed
- **"CUDA driver version is insufficient"**: Driver version too old for CUDA 12+
- **"No NVIDIA GPU detected"**: GPU not visible to drivers

**Solution**: Install/update NVIDIA drivers to version 525.60.13 or newer

### RAPIDS/Conda Environment Issues

#### Conda Create Error
```bash
# Update conda to latest version (includes libmamba solver)
conda update conda

# OR use mamba directly (faster)
conda install mamba -n base -c conda-forge
mamba env create -f environment.yml
```

#### CUDA Constraint Conflicts
If you see `__cuda` constraint conflicts:
```bash
# Check detected CUDA version
conda info

# Override if conda misdetected CUDA version
export CONDA_OVERRIDE_CUDA="12.0"
conda env create -f environment.yml
```

#### Packages from 'defaults' Channel
RAPIDS requires `conda-forge` channel, not `defaults`:
```bash
# Check for packages from defaults channel
conda list | grep defaults

# If found, recreate environment or modify .condarc:
conda config --remove channels defaults
conda config --add channels conda-forge
conda config --add channels nvidia
conda config --add channels rapidsai
```

### CuPy/CUDA Package Conflicts
If you see warnings about multiple CuPy packages:
```bash
# Clean up all CUDA/CuPy packages
conda activate matchmaker-dev
pip uninstall cupy cupy-cuda11x cupy-cuda12x -y
conda uninstall cupy -y

# Recreate environment from scratch
conda env remove -n matchmaker-dev
conda env create -f environment.yml
```

### Import/Runtime Errors
```bash
# Verify RAPIDS installation
python -c "import cudf, cuml, cugraph; print('RAPIDS OK')"

# Check CUDA runtime version
python -c "import cupy; print(f'CUDA Runtime: {cupy.cuda.runtime.runtimeGetVersion()}')"

# Verify GPU memory
python -c "import cupy; print(f'GPU Memory: {cupy.cuda.Device().mem_info}')"
```

### Performance Issues
- **Slow environment solving**: Use `mamba` instead of `conda`
- **Out of GPU memory**: Reduce batch sizes or use system with more GPU RAM
- **Slow data loading**: Use NVMe SSD storage when possible

**Important Notes**:
- The environment uses official RAPIDS 25.08 with CUDA 12.x support
- Compatible with NVIDIA drivers 525.60.13 or newer
- Requires compute capability 7.0+ GPU (Volta™ architecture or newer)
- For cloud instances (AWS, GCP, Azure), choose GPU-enabled instances with pre-installed drivers
- Windows users should use WSL2 with Ubuntu 20.04+

## Basic Usage

```python
from matchmaker import matchmaker

# Create a matching engine
engine = matchmaker.MatchingEngine()

# Load interaction data (requires CSV with appropriate columns)
engine.load_interactions("path/to/your/data.csv", 
  decider_col='user_id', 
  other_col='other_user_id', 
  like_col='liked', 
  timestamp_col='timestamp')
```
